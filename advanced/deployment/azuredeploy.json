{
  "$schema": "https://schema.management.azure.com/schemas/2019-04-01/deploymentTemplate.json#",
  "contentVersion": "1.0.0.0",
  "metadata": {
    "_generator": {
      "name": "bicep",
      "version": "0.15.31.15270",
      "templateHash": "1507601473468017481"
    }
  },
  "parameters": {
    "resourceNameBody": {
      "type": "string",
      "defaultValue": "tb-azbasics"
    },
    "resourceNameSuffix": {
      "type": "string",
      "metadata": {
        "description": "Something unique like your initials or short name (e.g. \"jsc\")"
      }
    },
    "resourceLocation": {
      "type": "string",
      "defaultValue": "[resourceGroup().location]"
    },
    "alertReceiverName": {
      "type": "string",
      "defaultValue": "Foo Bar"
    },
    "alertReceiverEmail": {
      "type": "string",
      "defaultValue": "foo@bar.ch"
    },
    "downloadMetricName": {
      "type": "string",
      "defaultValue": "Download",
      "metadata": {
        "description": "Metric name dispatched in code to indicate usage of get file function"
      }
    }
  },
  "variables": {
    "$fxv#0": "<Project Sdk=\"Microsoft.NET.Sdk\">\r\n  <PropertyGroup>\r\n    <TargetFramework>netstandard2.0</TargetFramework>\r\n  </PropertyGroup>\r\n\r\n  <ItemGroup>\r\n    <PackageReference Include=\"Azure.Storage.Blobs\" Version=\"12.15.1\"/>\r\n    <PackageReference Include=\"Newtonsoft.Json\" Version=\"13.0.3\"/>\r\n  </ItemGroup>\r\n</Project>",
    "$fxv#1": "using System.Net;\r\nusing System.Collections.Generic;\r\nusing Microsoft.AspNetCore.Mvc;\r\nusing Microsoft.Extensions.Primitives;\r\nusing Newtonsoft.Json;\r\nusing Newtonsoft.Json.Serialization;\r\nusing Azure.Storage.Blobs;\r\nusing Azure.Storage.Blobs.Models;\r\n\r\n// Read configuration values (App Settings)\r\nstatic string StorageConnectionString => System.Environment.GetEnvironmentVariable(nameof(StorageConnectionString), EnvironmentVariableTarget.Process);\r\nstatic string StorageBlobContainer => System.Environment.GetEnvironmentVariable(nameof(StorageBlobContainer), EnvironmentVariableTarget.Process);\r\n\r\npublic static async Task<IActionResult> Run(HttpRequest req, ILogger log)\r\n{\r\n    log.LogInformation($\"Get files triggered\");\r\n\r\n    // Establish connection to Blob Storage container (containing all our files as blobs)\r\n    var blobContainer = new BlobContainerClient(StorageConnectionString, StorageBlobContainer);\r\n\r\n    if (!await blobContainer.ExistsAsync())\r\n    {\r\n        return new NoContentResult();\r\n    }\r\n\r\n    var results = new List<string>();\r\n\r\n    // List all blobs in the container\r\n    await foreach (BlobItem blobItem in blobContainer.GetBlobsAsync())\r\n    {\r\n        results.Add(blobItem.Name);\r\n    }\r\n\r\n    // Metrics are specialized log entries which simplify monitoring. They're summarizable because of their numeric value and can also contain metadata\r\n    log.LogMetric(\"Listing\", 1, new Dictionary<string, object> { { \"Count\", results.Count } });\r\n    log.LogInformation($\"Found {results.Count} files\");\r\n    \r\n    var serializerSettings = new JsonSerializerSettings { ContractResolver = new CamelCasePropertyNamesContractResolver(), NullValueHandling = NullValueHandling.Ignore };\r\n\r\n    return new OkObjectResult(JsonConvert.SerializeObject(results, serializerSettings));\r\n}",
    "$fxv#2": "<Project Sdk=\"Microsoft.NET.Sdk\">\r\n  <PropertyGroup>\r\n    <TargetFramework>netstandard2.0</TargetFramework>\r\n  </PropertyGroup>\r\n\r\n  <ItemGroup>\r\n    <PackageReference Include=\"Azure.Storage.Blobs\" Version=\"12.15.1\"/>\r\n    <PackageReference Include=\"Newtonsoft.Json\" Version=\"13.0.3\"/>\r\n  </ItemGroup>\r\n</Project>",
    "$fxv#3": "using System.Net;\r\nusing System.Collections.Generic;\r\nusing Microsoft.AspNetCore.Mvc;\r\nusing Microsoft.Extensions.Primitives;\r\nusing Newtonsoft.Json;\r\nusing Newtonsoft.Json.Serialization;\r\nusing Azure.Storage.Blobs;\r\nusing Azure.Storage.Blobs.Models;\r\nusing Azure.Storage.Sas;\r\n\r\n// Read configuration values (App Settings)\r\nstatic string StorageConnectionString => System.Environment.GetEnvironmentVariable(nameof(StorageConnectionString), EnvironmentVariableTarget.Process);\r\nstatic string StorageBlobContainer => System.Environment.GetEnvironmentVariable(nameof(StorageBlobContainer), EnvironmentVariableTarget.Process);\r\nstatic string DownloadMetricName => System.Environment.GetEnvironmentVariable(nameof(DownloadMetricName), EnvironmentVariableTarget.Process);\r\n\r\npublic static async Task<IActionResult> Run(HttpRequest req, string filename, ILogger log)\r\n{\r\n    log.LogInformation($\"Get file '{filename}' triggered\");\r\n\r\n    if (string.IsNullOrWhiteSpace(Path.GetFileNameWithoutExtension(filename)) || !Path.HasExtension(filename))\r\n    {\r\n        return new BadRequestObjectResult($\"Invalid parameter '{filename}'\");\r\n    }\r\n\r\n    // Establish connection to Blob Storage blob\r\n    var blob = new BlobClient(StorageConnectionString, StorageBlobContainer, filename);\r\n\r\n    if (!await blob.ExistsAsync())\r\n    {\r\n        return new NotFoundResult();\r\n    }\r\n\r\n    // Download blob properties (note: a blob may also have custom metadata...)\r\n    var properties = await GetBlobProperties(StorageConnectionString, StorageBlobContainer, filename);\r\n\r\n    if (properties == null)\r\n    {\r\n        return new BadRequestObjectResult($\"File '{filename}' exists, but has corrupted metadata\");\r\n    }\r\n\r\n    // Generate SAS URL for protected download\r\n    if (!blob.CanGenerateSasUri)\r\n    {\r\n        return new UnauthorizedResult();\r\n    }\r\n\r\n    // SAS = Shared Access Signature, more: https://learn.microsoft.com/en-us/azure/storage/common/storage-sas-overview\r\n    var sasBuilder = new BlobSasBuilder()\r\n    {\r\n        BlobContainerName = StorageBlobContainer,\r\n        BlobName = blob.Name, // Token is valid for this particular blob only\r\n        Resource = \"b\",\r\n        ExpiresOn = DateTimeOffset.UtcNow.AddMinutes(5) // Token will be valid for 5 minutes only\r\n    };\r\n    sasBuilder.SetPermissions(BlobSasPermissions.Read);\r\n\r\n    Uri sasUri = blob.GenerateSasUri(sasBuilder);\r\n\r\n    // Build result object\r\n    var result = new FileInfo\r\n    {\r\n        Name = blob.Name,\r\n        ContentType = properties.ContentType,\r\n        SizeInBytes = properties.ContentLength?.ToString(),\r\n        LastModified = properties.LastModified?.ToString(\"s\"),\r\n        Uri = sasUri.AbsoluteUri\r\n    };\r\n\r\n    // Metrics are specialized log entries which simplify monitoring. They're summarizable because of their numeric value and can also contain metadata\r\n    log.LogMetric(DownloadMetricName, 1, new Dictionary<string, object> { { \"File\", filename } });\r\n\r\n    var serializerSettings = new JsonSerializerSettings { ContractResolver = new CamelCasePropertyNamesContractResolver(), NullValueHandling = NullValueHandling.Ignore };\r\n\r\n    return new OkObjectResult(JsonConvert.SerializeObject(result, serializerSettings));\r\n}\r\n\r\npublic static async Task<BlobItemProperties> GetBlobProperties(string storageConnectionString, string storageBlobContainer, string filename)\r\n{\r\n    // Note: The BlobClient does have a method to get properties directly (https://learn.microsoft.com/en-us/dotnet/api/azure.storage.blobs.specialized.blobbaseclient.getpropertiesasync)\r\n    //       Unfortunately this has a bug with current library version and does not provide a valid object, therefore this workaround\r\n    var blobContainer = new BlobContainerClient(storageConnectionString, storageBlobContainer);\r\n    await foreach (BlobItem blobItem in blobContainer.GetBlobsAsync(prefix: filename))\r\n    {\r\n        return blobItem.Properties;\r\n    }\r\n\r\n    return null;\r\n}\r\n\r\npublic class FileInfo\r\n{\r\n    public string Name { get; set; }\r\n    public string ContentType { get; set; }\r\n    public string SizeInBytes { get; set; }\r\n    public string LastModified { get; set; }\r\n    public string Uri { get; set; }\r\n}",
    "storageAccountName": "[replace(format('st-{0}-{1}', parameters('resourceNameBody'), parameters('resourceNameSuffix')), '-', '')]",
    "storageBlobContainerName": "files",
    "funcAppName": "[format('func-{0}-{1}', parameters('resourceNameBody'), parameters('resourceNameSuffix'))]",
    "keyVaultName": "[format('kv-{0}-{1}', parameters('resourceNameBody'), parameters('resourceNameSuffix'))]",
    "keyVaultSecretStorageAccountConnectionString": "StorageConnectionString"
  },
  "resources": [
    {
      "type": "Microsoft.OperationalInsights/workspaces",
      "apiVersion": "2021-12-01-preview",
      "name": "[format('log-{0}-{1}', parameters('resourceNameBody'), parameters('resourceNameSuffix'))]",
      "location": "[parameters('resourceLocation')]",
      "properties": {
        "sku": {
          "name": "pergb2018"
        },
        "retentionInDays": 30,
        "features": {
          "enableLogAccessUsingOnlyResourcePermissions": true
        },
        "workspaceCapping": {
          "dailyQuotaGb": -1
        },
        "publicNetworkAccessForIngestion": "Enabled",
        "publicNetworkAccessForQuery": "Enabled"
      }
    },
    {
      "type": "Microsoft.Insights/components",
      "apiVersion": "2020-02-02",
      "name": "[format('appi-{0}-{1}', parameters('resourceNameBody'), parameters('resourceNameSuffix'))]",
      "location": "[parameters('resourceLocation')]",
      "kind": "web",
      "properties": {
        "Application_Type": "web",
        "RetentionInDays": 90,
        "WorkspaceResourceId": "[resourceId('Microsoft.OperationalInsights/workspaces', format('log-{0}-{1}', parameters('resourceNameBody'), parameters('resourceNameSuffix')))]",
        "IngestionMode": "LogAnalytics",
        "publicNetworkAccessForIngestion": "Enabled",
        "publicNetworkAccessForQuery": "Enabled"
      },
      "dependsOn": [
        "[resourceId('Microsoft.OperationalInsights/workspaces', format('log-{0}-{1}', parameters('resourceNameBody'), parameters('resourceNameSuffix')))]"
      ]
    },
    {
      "type": "Microsoft.Storage/storageAccounts",
      "apiVersion": "2022-09-01",
      "name": "[variables('storageAccountName')]",
      "location": "[parameters('resourceLocation')]",
      "sku": {
        "name": "Standard_LRS"
      },
      "kind": "StorageV2",
      "properties": {
        "dnsEndpointType": "Standard",
        "defaultToOAuthAuthentication": false,
        "publicNetworkAccess": "Enabled",
        "allowCrossTenantReplication": true,
        "minimumTlsVersion": "TLS1_2",
        "allowBlobPublicAccess": true,
        "allowSharedKeyAccess": true,
        "networkAcls": {
          "bypass": "AzureServices",
          "defaultAction": "Allow"
        },
        "supportsHttpsTrafficOnly": true,
        "encryption": {
          "requireInfrastructureEncryption": false,
          "services": {
            "file": {
              "keyType": "Account",
              "enabled": true
            },
            "blob": {
              "keyType": "Account",
              "enabled": true
            }
          },
          "keySource": "Microsoft.Storage"
        },
        "accessTier": "Hot"
      }
    },
    {
      "type": "Microsoft.Storage/storageAccounts/blobServices",
      "apiVersion": "2022-09-01",
      "name": "[format('{0}/{1}', variables('storageAccountName'), 'default')]",
      "properties": {
        "changeFeed": {
          "enabled": false
        },
        "restorePolicy": {
          "enabled": false
        },
        "containerDeleteRetentionPolicy": {
          "enabled": true,
          "days": 7
        },
        "cors": {
          "corsRules": []
        },
        "deleteRetentionPolicy": {
          "allowPermanentDelete": false,
          "enabled": true,
          "days": 7
        },
        "isVersioningEnabled": false
      },
      "dependsOn": [
        "[resourceId('Microsoft.Storage/storageAccounts', variables('storageAccountName'))]"
      ]
    },
    {
      "type": "Microsoft.Storage/storageAccounts/blobServices/containers",
      "apiVersion": "2022-09-01",
      "name": "[format('{0}/{1}/{2}', variables('storageAccountName'), 'default', variables('storageBlobContainerName'))]",
      "properties": {
        "publicAccess": "None"
      },
      "dependsOn": [
        "[resourceId('Microsoft.Storage/storageAccounts/blobServices', variables('storageAccountName'), 'default')]"
      ]
    },
    {
      "type": "Microsoft.KeyVault/vaults",
      "apiVersion": "2022-11-01",
      "name": "[variables('keyVaultName')]",
      "location": "[parameters('resourceLocation')]",
      "properties": {
        "sku": {
          "family": "A",
          "name": "standard"
        },
        "tenantId": "[subscription().tenantId]",
        "accessPolicies": [
          {
            "tenantId": "[subscription().tenantId]",
            "objectId": "[reference(resourceId('Microsoft.Web/sites', variables('funcAppName')), '2022-03-01', 'full').identity.principalId]",
            "permissions": {
              "certificates": [],
              "keys": [],
              "secrets": [
                "get"
              ]
            }
          }
        ],
        "enabledForDeployment": false,
        "enabledForDiskEncryption": false,
        "enabledForTemplateDeployment": false,
        "enableSoftDelete": true,
        "softDeleteRetentionInDays": 90,
        "enableRbacAuthorization": false,
        "publicNetworkAccess": "Enabled"
      },
      "dependsOn": [
        "[resourceId('Microsoft.Web/sites', variables('funcAppName'))]"
      ]
    },
    {
      "type": "Microsoft.Insights/diagnosticSettings",
      "apiVersion": "2017-05-01-preview",
      "scope": "[format('Microsoft.KeyVault/vaults/{0}', variables('keyVaultName'))]",
      "name": "LogAnalytics",
      "properties": {
        "workspaceId": "[resourceId('Microsoft.OperationalInsights/workspaces', format('log-{0}-{1}', parameters('resourceNameBody'), parameters('resourceNameSuffix')))]",
        "logs": [
          {
            "category": "AuditEvent",
            "enabled": true
          }
        ],
        "metrics": [
          {
            "category": "AllMetrics",
            "enabled": true
          }
        ]
      },
      "dependsOn": [
        "[resourceId('Microsoft.KeyVault/vaults', variables('keyVaultName'))]",
        "[resourceId('Microsoft.OperationalInsights/workspaces', format('log-{0}-{1}', parameters('resourceNameBody'), parameters('resourceNameSuffix')))]"
      ]
    },
    {
      "type": "Microsoft.KeyVault/vaults/secrets",
      "apiVersion": "2022-07-01",
      "name": "[format('{0}/{1}', variables('keyVaultName'), variables('keyVaultSecretStorageAccountConnectionString'))]",
      "properties": {
        "value": "[format('DefaultEndpointsProtocol=https;AccountName={0};AccountKey={1}', variables('storageAccountName'), listKeys(resourceId('Microsoft.Storage/storageAccounts', variables('storageAccountName')), '2022-09-01').keys[0].value)]"
      },
      "dependsOn": [
        "[resourceId('Microsoft.KeyVault/vaults', variables('keyVaultName'))]",
        "[resourceId('Microsoft.Storage/storageAccounts', variables('storageAccountName'))]"
      ]
    },
    {
      "type": "Microsoft.Web/serverfarms",
      "apiVersion": "2022-03-01",
      "name": "[format('asp-{0}-{1}', parameters('resourceNameBody'), parameters('resourceNameSuffix'))]",
      "location": "[parameters('resourceLocation')]",
      "sku": {
        "name": "Y1",
        "tier": "Dynamic"
      },
      "kind": "functionapp",
      "properties": {}
    },
    {
      "type": "Microsoft.Web/sites",
      "apiVersion": "2022-03-01",
      "name": "[variables('funcAppName')]",
      "location": "[parameters('resourceLocation')]",
      "kind": "functionapp",
      "identity": {
        "type": "SystemAssigned"
      },
      "properties": {
        "enabled": true,
        "hostNameSslStates": [
          {
            "name": "[format('{0}.azurewebsites.net', variables('funcAppName'))]",
            "sslState": "Disabled",
            "hostType": "Standard"
          },
          {
            "name": "[format('{0}.scm.azurewebsites.net', variables('funcAppName'))]",
            "sslState": "Disabled",
            "hostType": "Repository"
          }
        ],
        "serverFarmId": "[resourceId('Microsoft.Web/serverfarms', format('asp-{0}-{1}', parameters('resourceNameBody'), parameters('resourceNameSuffix')))]",
        "siteConfig": {
          "functionAppScaleLimit": 200,
          "minimumElasticInstanceCount": 0,
          "ftpsState": "Disabled"
        },
        "containerSize": 1536,
        "dailyMemoryTimeQuota": 0,
        "httpsOnly": true,
        "redundancyMode": "None",
        "publicNetworkAccess": "Enabled",
        "keyVaultReferenceIdentity": "SystemAssigned"
      },
      "dependsOn": [
        "[resourceId('Microsoft.Web/serverfarms', format('asp-{0}-{1}', parameters('resourceNameBody'), parameters('resourceNameSuffix')))]"
      ]
    },
    {
      "type": "Microsoft.Web/sites/config",
      "apiVersion": "2022-03-01",
      "name": "[format('{0}/{1}', variables('funcAppName'), 'appsettings')]",
      "properties": {
        "AzureWebJobsStorage": "[format('@Microsoft.KeyVault(VaultName={0};SecretName={1})', variables('keyVaultName'), variables('keyVaultSecretStorageAccountConnectionString'))]",
        "WEBSITE_CONTENTAZUREFILECONNECTIONSTRING": "[format('DefaultEndpointsProtocol=https;AccountName={0};AccountKey={1}', variables('storageAccountName'), listKeys(resourceId('Microsoft.Storage/storageAccounts', variables('storageAccountName')), '2022-09-01').keys[0].value)]",
        "APPLICATIONINSIGHTS_CONNECTION_STRING": "[reference(resourceId('Microsoft.Insights/components', format('appi-{0}-{1}', parameters('resourceNameBody'), parameters('resourceNameSuffix'))), '2020-02-02').ConnectionString]",
        "FUNCTIONS_EXTENSION_VERSION": "~4",
        "FUNCTIONS_WORKER_RUNTIME": "dotnet",
        "WEBSITE_TIME_ZONE": "W. Europe Standard Time",
        "WEBSITE_CONTENTSHARE": "[variables('funcAppName')]",
        "StorageConnectionString": "[format('@Microsoft.KeyVault(VaultName={0};SecretName={1})', variables('keyVaultName'), variables('keyVaultSecretStorageAccountConnectionString'))]",
        "StorageBlobContainer": "[variables('storageBlobContainerName')]",
        "DownloadMetricName": "[parameters('downloadMetricName')]"
      },
      "dependsOn": [
        "[resourceId('Microsoft.Insights/components', format('appi-{0}-{1}', parameters('resourceNameBody'), parameters('resourceNameSuffix')))]",
        "[resourceId('Microsoft.Web/sites', variables('funcAppName'))]",
        "[resourceId('Microsoft.KeyVault/vaults/secrets', variables('keyVaultName'), variables('keyVaultSecretStorageAccountConnectionString'))]",
        "[resourceId('Microsoft.Storage/storageAccounts', variables('storageAccountName'))]"
      ]
    },
    {
      "type": "Microsoft.Web/sites/functions",
      "apiVersion": "2022-03-01",
      "name": "[format('{0}/{1}', variables('funcAppName'), 'ListFiles')]",
      "properties": {
        "config": {
          "bindings": [
            {
              "name": "req",
              "route": "files",
              "type": "httpTrigger",
              "direction": "in",
              "authLevel": "anonymous",
              "methods": [
                "get"
              ]
            },
            {
              "name": "$return",
              "type": "http",
              "direction": "out"
            }
          ]
        },
        "files": {
          "function.proj": "[variables('$fxv#0')]",
          "run.csx": "[variables('$fxv#1')]"
        },
        "test_data": "{\"method\":\"get\",\"queryStringParams\":[],\"headers\":[],\"body\":\"\"}",
        "invoke_url_template": "[format('https://{0}.azurewebsites.net/api/files', variables('funcAppName'))]",
        "language": "CSharp",
        "isDisabled": false
      },
      "dependsOn": [
        "[resourceId('Microsoft.Web/sites', variables('funcAppName'))]"
      ]
    },
    {
      "type": "Microsoft.Web/sites/functions",
      "apiVersion": "2022-03-01",
      "name": "[format('{0}/{1}', variables('funcAppName'), 'GetFile')]",
      "properties": {
        "config": {
          "bindings": [
            {
              "name": "req",
              "route": "files/{filename}",
              "type": "httpTrigger",
              "direction": "in",
              "authLevel": "anonymous",
              "methods": [
                "get"
              ]
            },
            {
              "name": "$return",
              "type": "http",
              "direction": "out"
            }
          ]
        },
        "files": {
          "function.proj": "[variables('$fxv#2')]",
          "run.csx": "[variables('$fxv#3')]"
        },
        "test_data": "{\"method\":\"get\",\"queryStringParams\":[{\"name\":\"filename\",\"value\":\"test.png\"}],\"headers\":[],\"body\":\"\"}",
        "invoke_url_template": "[format('https://{0}.azurewebsites.net/api/files/{{filename}}', variables('funcAppName'))]",
        "language": "CSharp",
        "isDisabled": false
      },
      "dependsOn": [
        "[resourceId('Microsoft.Web/sites', variables('funcAppName'))]"
      ]
    },
    {
      "type": "Microsoft.Insights/actionGroups",
      "apiVersion": "2023-01-01",
      "name": "[format('ag-{0}-{1}', parameters('resourceNameBody'), parameters('resourceNameSuffix'))]",
      "location": "Global",
      "properties": {
        "groupShortName": "TechBier",
        "enabled": true,
        "emailReceivers": [
          {
            "name": "[parameters('alertReceiverName')]",
            "emailAddress": "[parameters('alertReceiverEmail')]"
          }
        ]
      }
    },
    {
      "type": "Microsoft.Insights/metricAlerts",
      "apiVersion": "2018-03-01",
      "name": "[format('ar-{0}-{1}', parameters('resourceNameBody'), parameters('resourceNameSuffix'))]",
      "location": "global",
      "properties": {
        "description": "Notification when > 5 file downloads per hour",
        "severity": 3,
        "enabled": true,
        "scopes": [
          "[resourceId('Microsoft.Insights/components', format('appi-{0}-{1}', parameters('resourceNameBody'), parameters('resourceNameSuffix')))]"
        ],
        "evaluationFrequency": "PT30M",
        "windowSize": "PT1H",
        "criteria": {
          "allOf": [
            {
              "threshold": 5,
              "name": "Metric1",
              "metricNamespace": "Azure.ApplicationInsights",
              "metricName": "[parameters('downloadMetricName')]",
              "operator": "GreaterThan",
              "timeAggregation": "Total",
              "skipMetricValidation": false,
              "criterionType": "StaticThresholdCriterion"
            }
          ],
          "odata.type": "Microsoft.Azure.Monitor.SingleResourceMultipleMetricCriteria"
        },
        "autoMitigate": false,
        "targetResourceType": "microsoft.insights/components",
        "targetResourceRegion": "[parameters('resourceLocation')]",
        "actions": [
          {
            "actionGroupId": "[resourceId('Microsoft.Insights/actionGroups', format('ag-{0}-{1}', parameters('resourceNameBody'), parameters('resourceNameSuffix')))]",
            "webHookProperties": {}
          }
        ]
      },
      "dependsOn": [
        "[resourceId('Microsoft.Insights/actionGroups', format('ag-{0}-{1}', parameters('resourceNameBody'), parameters('resourceNameSuffix')))]",
        "[resourceId('Microsoft.Insights/components', format('appi-{0}-{1}', parameters('resourceNameBody'), parameters('resourceNameSuffix')))]"
      ]
    }
  ],
  "outputs": {
    "userApiEndpoint": {
      "type": "string",
      "value": "[format('https://{0}.azurewebsites.net/api/files', variables('funcAppName'))]"
    },
    "operatorStorageBrowserEndpoint": {
      "type": "string",
      "value": "[format('{0}/#@{1}/resource{2}/storagebrowser', environment().portal, subscription().tenantId, resourceId('Microsoft.Storage/storageAccounts', variables('storageAccountName')))]"
    }
  }
}